{"id":4122,"date":"2019-02-24T18:19:22","date_gmt":"2019-02-24T18:19:22","guid":{"rendered":"https:\/\/help.perfexcrm.com\/?p=4122"},"modified":"2019-04-04T12:49:50","modified_gmt":"2019-04-04T12:49:50","slug":"staff-capabilities-and-access","status":"publish","type":"post","link":"https:\/\/help.perfexcrm.com\/staff-capabilities-and-access\/","title":{"rendered":"Staff Capabilities and Access"},"content":{"rendered":"\n<div class=\"st-alert st-alert- \">This feature is available from version 2.3.4<\/div>\n\n\n\n<p>When creating more complex modules, probably you will want to add permissions so the owner can control what staff members can and cannot do.<\/p>\n\n\n\n<p>In Perfex CRM, this is handled with the staff permissions, each staff member can have different access permissions.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Define Module Permissions<\/h3>\n\n\n\n<p>As an example, assuming the module is intended to send mass emails and you want the owner to be able to allow only specific staff members to send mails, in your <strong>module init file<\/strong> add the following code:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>hooks()->add_action('admin_init', 'my_module_permissions');\n\nfunction my_module_permissions($permissions)\n{\n    $config = [];\n\n    $config['capabilities'] = [\n            'send_mass_emails'   => 'Send Mass Emails',\n            'create_templates'   => 'Create Mail Templates',\n    ];\n\n    register_staff_capabilities(\n        'prefix-mass-emails', \n        $config, \n        _l('prefix_mass_emails')\n    );\n}\n<\/code><\/pre>\n\n\n\n<p>Save the file and navigate to e.q.<strong> Setup-&gt;Staff<\/strong> and edit some staff member, when you click on the permissions tab, you will be able to see the permissions at the bottom.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Parameters explained<\/h4>\n\n\n\n<ol class=\"wp-block-list\"><li><strong>$feature_id ( prefix-mass-emails ) &#8211; <\/strong>We call this the permissions <strong>feature<\/strong>, but keep in mind that the name must be <strong>unique<\/strong>.<\/li><li><strong>$config<\/strong> <strong>(array) &#8211;<\/strong> The actual config with an array that has <strong>capabilities key,<\/strong> this will be unique to your implementation and will depend on what kind of capabilities your feature needs. <\/li><li><strong>$name &#8211; <\/strong>The name of module e.q. Mass Mailer, the name is shown to the user who is editing the permissions so he can identify for which feature the permissions are intended.  <\/li><\/ol>\n\n\n\n<h3 class=\"wp-block-heading\">Injecting Capabilities Into Existing Features<\/h3>\n\n\n\n<p>If you want to inject capabilities into an existing feature, you can achieve this with the following code:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function my_module_permissions()\n{\n    $capabilities = [];\n\n    $capabilities['capabilities'] = [\n            'my-unique-capability-id' => 'Invoices Related Capability',\n    ];\n\n    register_staff_capabilities('invoices', $capabilities);\n}<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Checking If Staff Has The Capabilities<\/h3>\n\n\n\n<p>Now that you added your permissions, in your code you will want to perform checks and see if the staff member really has the capability for perform specific action.<\/p>\n\n\n\n<p>Assuming that you have a controller with method <strong>send<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public function send() {\n    if(staff_can('send_mass_emails', 'prefix-mass-emails')) {\n        \/\/ Send mails here\n    }\n}<\/code><\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">staff_can<\/h4>\n\n\n\n<pre class=\"wp-block-code\"><code>staff_can($capability, $feature = null, $staff_id = '')<\/code><\/pre>\n\n\n\n<p>Can be used e.q. <strong>staff_can<\/strong>(&#8216;view&#8217;, &#8216;invoices&#8217;);<\/p>\n\n\n\n<p><strong>@param<\/strong>  string <strong>$capability<\/strong>         e.q. view | create | edit | delete | view_own | can_delete<\/p>\n\n\n\n<p><strong>@param<\/strong>  string <strong>$feature<\/strong>            the feature name e.q. invoices | estimates | contracts | my_module_name<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p><strong>NOTE: <\/strong>The <strong>$feature<\/strong> parameter is available as optional, but it&#8217;s highly recommended always to be passed because of the uniqueness of the capability names. <\/p>\n\n\n\n<p>For example, if there is <g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"14\" data-gr-id=\"14\">capability<\/g> &#8220;view&#8221; for <g class=\"gr_ gr_13 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep\" id=\"13\" data-gr-id=\"13\">feature<\/g> &#8220;estimates&#8221; and also for &#8220;invoices&#8221; a capability &#8220;view&#8221; exists too<\/p>\n\n\n\n<p>In this case, if you don&#8217;t pass the feature name, there may be inaccurate results.<\/p>\n\n\n\n<p>If you are certain that your capability name is unique e.q. <strong>my_prefixed_capability_can_create <\/strong>, you don&#8217;t need to pass the $feature  <br> and you can use this function as e.q. <strong>staff_can(&#8216;my_prefixed_capability_can_create&#8217;) <\/strong><br><\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p><strong>@param<\/strong>  mixed <strong>$staff_id<\/strong>            staff id | if not passed, the logged in staff will be checked<\/p>\n\n\n\n<p><strong>Be aware the the administrators can access all functionalities, the function staff_can will return true for any capability if the user is administrator.<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>When creating more complex modules, probably you will want to add permissions so the owner can control what staff members can and cannot do. In Perfex CRM, this is handled with the staff permissions, each staff member can have different access permissions. Define Module Permissions As an example, assuming the module is intended to send [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[54],"tags":[],"class_list":["post-4122","post","type-post","status-publish","format-standard","hentry","category-modules"],"aioseo_notices":[],"_links":{"self":[{"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/posts\/4122","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/comments?post=4122"}],"version-history":[{"count":0,"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/posts\/4122\/revisions"}],"wp:attachment":[{"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/media?parent=4122"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/categories?post=4122"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/help.perfexcrm.com\/wp-json\/wp\/v2\/tags?post=4122"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}