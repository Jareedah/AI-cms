Perfexcrm info:High ResolutionYesCompatible BrowsersFirefox, Safari, Opera, Chrome, EdgeFiles IncludedJavaScript JS, HTML, CSS, PHP, SQLSoftware FrameworkCodeIgniterSoftware VersionPHP 8.x, MySQL 8.x, MySQL 5.xSystem RequirementsPHP >= 8.1+MySQL 5.1+mod_rewrite ApacheMySQLi PHP ExtensionPDO PHP ExtensioncURL PHP ExtensionOpenSSL PHP ExtensionMBString PHP Extensioniconv PHP ExtensionIMAP PHP ExtensionGD PHP ExtensionZip PHP Extensionallow_url_fopen enabledIn most hosting accounts these extensions are enabled by default. But you should consult with your hosting provider.Introduction to Perfex CRM modules/Modules /Introduction to Perfex CRM modules March 24, 2019  ModulesThe modules documentation is valid starting from version 2.3.2Perfex CRM version 2.3.0 comes with a built-in feature to create modules and integrate additional features into the core functionalities.If you are eager to create modules for Perfex CRM to sell them on CodeCanyon or create your own features that you need for your requirements you are in the right place.Modules are packages of code that extend the core functionality of Perfex CRM , by making your own module you are extending Perfex CRM or integrating brand new features.The modules can consist of action hooks, filters, controllers, models, custom php classes/libraries, language files, views, this code base is already used in Perfex CRM.What should you know before start creating modules?Maintaining ModulesIt’s your responsibility to maintain the modules you will be creating when there will be Perfex CRM major changes and make them compatible with the latest version.Perfex CRM is still a new modular application, in each update, we will try to enhance the code and make it more modular and for this reason, there will be breaking changes which you will need to adapt your modules to those breaking changes.Modules SecurityPerfex CRM is built with the Codeigniter PHP framework which we follow security practices in order to make Perfex CRM reliable.When creating new modules, you must ensure that your modules are secure and use already existing functions and methods that exist in the Codeigniter PHP framework.Selling modules on CodeCanyonIf you want to create modules and sell them as an author on CodeCanyon, you are free to do so, keep in mind that because of our Exclusivity agreement, you can ONLY sell the modules on CodeCanyon.Selling Perfex CRM modules CodeCanyon means that you are responsible for setting the appropriate price of the module, the way you will present the module, offering support, ensuring that your module is compatible with latest version changes and your marketing strategy.You can’t present us as a partner to you as an individual or company, publishing a module from your Envato account, means that you own all the copyright to the module and the code.Under our own discretion, we may decide to market your module or recommend it to our customers.Support for creating modulesWe won’t offer you support for creating modules, if you are certain that something does not work right and it’s a bug, you can open a support ticket at https://my.perfexcrm.com and provide more information, we will be happy to take a look.However, you should not expect on How To’s to create a specific feature, modules development is not included in support, try to figure on your own, or if you need any specific functions, you should explore the code.Module Basics/Modules /Module Basics March 24, 2019  ModulesThe modules documentation is valid starting from version 2.3.2Perfex CRM modules use the Codeigniter PHP framework code base like controllers, models, language files, libraries, views etc… if you are already familiar with the Codeigniter framework, you will be able to easily get started, if not we recommend you to visit their official website and documentation.Additionally, we added a bunch of helper functions, features, action hooks and filters that will make the process of creating and integrating modules easier.Modules location & NameAll modules should be added in the modules folder in your root directory where Perfex CRM is installed and each module must have unique folder name and init file with the same name as your module folder name.Creating your first moduleBefore start to develop a module, make sure that you set development mode in order to see any errors and functions/hooks deprecation warnings.To get started and create your first module, follow the steps below.Navigate to Perfex CRM installation and open the modules directoryCreate a new directory and name it after your module (e.q. sample_module)Create a new PHP file with the same name as the module directory, in this case, sample_module.php, this file will act as “init file” for this module.In this case, the module is already created and registered but it does not do anything yet nor have any name or descriptions added, we will add the module metadata like name, description, URL, author via a PHP block comment which will act as module headers.The module headers should be added only in the init module file.Now open the sample_module.php file we created before and add the following comment at the top of the file:<?php/** * Ensures that the module init file can&apos;t be accessed directly, only within the application. */defined(&apos;BASEPATH&apos;) or exit(&apos;No direct script access allowed&apos;);/*Module Name: Sample Perfex CRM ModuleDescription: Sample module description.Version: 2.3.0Requires at least: 2.3.**/After you save the file, you can navigate in your Perfex CRM admin area to Setup->Modules and you will be able to see your module listed.The comment will act as a file header for the module, you should check the file headers guide if you want to get more familiar.Make sure that you always add the Module Name header		It’s very important to make sure that your module folder name and the .php file name are the same, otherwise, your module won’t be shown in the modules listBasic HooksYou will need to implement few basic hooks when creating new module, like register_activation_hook(), register_deactivation_hook() and register_uninstall_hook()If you are familiar with WordPress, you will probably know the work that these hooks do.Adding HooksYou can add hooks in your module .php files with:hooks()->add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1);hooks()->add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1);hooks()->do_action($tag, $arg = &apos;&apos;);hooks()->apply_filters($tag, $value, $additionalParams);You can add your own filters and actions so you can use them in your module implementation also, adding actions and filters will help other modules to interact with your module and extend the module functionalities.Prefix Custom FunctionsYou should always prefix any custom functions and classes to prevent any conflicts with Perfex CRM default functions or classes or with any other modules.Using Codeigniter Instance in module filesProbably you will want to use the Codeigniter framework instance in your module init file or any other modules files that are not extending the framework base classes.$this, only works within your controllers, your models, or your views.You can achieve this anywhere in your files with the following code:First, assign the CodeIgniter object to a variable:$CI = &get_instance();Once you’ve assigned the object to a variable, you’ll use that variable instead of $this$CI  =&get_instance();$CI->load->helper(&apos;module_name/helper_name&apos;);$CI->load->library(&apos;module_name/library_name&apos;);Database PrefixFrom version 2.3.0 Perfex CRM have option to define custom database tables prefix.The default table prefix in Perfex CRM is tblYou should always use our custom function db_prefix() to get the database prefix when querying the database, this will ensure that in case the user changed the database prefix, your module will still work with the new user prefix.Here is an example from the Goals Tracking module install.php file.<?phpdefined(&apos;BASEPATH&apos;) or exit(&apos;No direct script access allowed&apos;);if (!$CI->db->table_exists(db_prefix() . &apos;goals&apos;)) {    $CI->db->query(&apos;CREATE TABLE `&apos; . db_prefix() . &quot;goals` (  `id` int(11) NOT NULL,  `subject` varchar(191) NOT NULL,  `description` text NOT NULL,  `start_date` date NOT NULL,  `end_date` date NOT NULL,  `goal_type` int(11) NOT NULL,  `contract_type` int(11) NOT NULL DEFAULT &apos;0&apos;,  `achievement` int(11) NOT NULL,  `notify_when_fail` tinyint(1) NOT NULL DEFAULT &apos;1&apos;,  `notify_when_achieve` tinyint(1) NOT NULL DEFAULT &apos;1&apos;,  `notified` int(11) NOT NULL DEFAULT &apos;0&apos;,  `staff_id` int(11) NOT NULL DEFAULT &apos;0&apos;) ENGINE=InnoDB DEFAULT CHARSET=&quot; . $CI->db->char_set . &apos;;&apos;);Create Module OptionsPerfex CRM has table in database options for storing various settings for internal usage and settings that are used in features. We have developed custom PHP functions that will perform queries to fetch options from database.Option names are strings, and they must be unique so that they do not conflict with either Perfex CRM or other Modules.add_option($name, $value, $autoload)$nameRequired (string). The name of the option to be added, make sure it’s unique and prefixed with E.q. your module name.$valueThe option value (string)$autoload(integer) 1 or 0Whether this option should be autoloaded with all other options, if you are using the option too much time in the view, the best is to autoload it to prevent multiple queries in order to get the option. Defaults to 1Keep in mind that add_option function won’t create the option if the option name already exists in the options table.get_option($option_name);Retrieve an option from database, $option_name (string) your option name.update_option($option_name, $new_value);The update_option function will update the option value, since version 2.3.3, when you call update_option if the option not exists, Perfex CRM will create this option.Module File Headers/Modules /Module File Headers March 24, 2019  ModulesEach module in Perfex CRM consist of init file which contains the general module configuration and includes headers containing meta-information regarding the module.Module init file headers exampleThe follow example is taken from the default Perfex CRM module Menu Setup that comes with the installation.<?phpdefined(&apos;BASEPATH&apos;) or exit(&apos;No direct script access allowed&apos;);/*Module Name: Menu SetupDescription: Default module to apply changes to the menusVersion: 2.3.0Requires at least: 2.3.**/Available HeadersYou can find below the list of available headers that can be added to module init file.Module Name – requiredModule URI – module URLVersion – the version of the moduleDescription – the description of the module, you can explain what does the module do.Author – module author nameAuthor URI – module author URLRequires at least – what version of Perfex CRM the module requires at leastCommon Module Functions/Modules /Common Module Functions March 24, 2019  Modulesregister_activation_hook/** * Register module activation hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_activation_hook($module, $function)register_deactivation_hook/** * Register module deactivation hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_deactivation_hook($module, $function)register_uninstall_hook/** * Register module uninstall hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_uninstall_hook($module, $function)register_cron_task/** * Register module cron task, the cron task is executed after the core cron tasks are finished * @param  mixed $function  function/class parameter for the hook * @return null */register_cron_task($function)register_payment_gateway /**     * Inject custom payment gateway into the payment gateways array     * @param string $idpayment gateway id, should equal like the libraries/classname e.q. gateways/New_gateway     * @param string $module       module name to load the gateway if not already loaded     */register_payment_gateway($id, $module)register_language_files/** * Register module language files to support custom_lang.php file * @param  string $module    module system name * @param  array  $languages array of language file names without the _lang.php * @return null */register_language_files($module, $languages)module_dir_url/** * Module URL * e.q. https://crm-installation.com/module_name/ * @param  string $module  module system name * @param  string $segment additional string to append to the URL * @return string */module_dir_url($module, $segment = &apos;&apos;)module_dir_path /** * Module directory absolute path * @param  string $module module system name * @param  string $concat append additional string to the path * @return string */module_dir_path($module, $concat = &apos;&apos;)module_libs_path/** * Module libraries path * e.q. modules/module_name/libraries * @param  string $module module name * @param  string $concat append additional string to the path * @return string */module_libs_path($module, $concat = &apos;&apos;)Common Module Functions/Modules /Common Module Functions March 24, 2019  Modulesregister_activation_hook/** * Register module activation hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_activation_hook($module, $function)register_deactivation_hook/** * Register module deactivation hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_deactivation_hook($module, $function)register_uninstall_hook/** * Register module uninstall hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_uninstall_hook($module, $function)register_cron_task/** * Register module cron task, the cron task is executed after the core cron tasks are finished * @param  mixed $function  function/class parameter for the hook * @return null */register_cron_task($function)register_payment_gateway /**     * Inject custom payment gateway into the payment gateways array     * @param string $idpayment gateway id, should equal like the libraries/classname e.q. gateways/New_gateway     * @param string $module       module name to load the gateway if not already loaded     */register_payment_gateway($id, $module)register_language_files/** * Register module language files to support custom_lang.php file * @param  string $module    module system name * @param  array  $languages array of language file names without the _lang.php * @return null */register_language_files($module, $languages)module_dir_url/** * Module URL * e.q. https://crm-installation.com/module_name/ * @param  string $module  module system name * @param  string $segment additional string to append to the URL * @return string */module_dir_url($module, $segment = &apos;&apos;)module_dir_path /** * Module directory absolute path * @param  string $module module system name * @param  string $concat append additional string to the path * @return string */module_dir_path($module, $concat = &apos;&apos;)module_libs_path/** * Module libraries path * e.q. modules/module_name/libraries * @param  string $module module name * @param  string $concat append additional string to the path * @return string */module_libs_path($module, $concat = &apos;&apos;)Module File Headers/Modules /Module File Headers March 24, 2019  ModulesEach module in Perfex CRM consist of init file which contains the general module configuration and includes headers containing meta-information regarding the module.Module init file headers exampleThe follow example is taken from the default Perfex CRM module Menu Setup that comes with the installation.<?phpdefined(&apos;BASEPATH&apos;) or exit(&apos;No direct script access allowed&apos;);/*Module Name: Menu SetupDescription: Default module to apply changes to the menusVersion: 2.3.0Requires at least: 2.3.**/Available HeadersYou can find below the list of available headers that can be added to module init file.Module Name – requiredModule URI – module URLVersion – the version of the moduleDescription – the description of the module, you can explain what does the module do.Author – module author nameAuthor URI – module author URLRequires at least – what version of Perfex CRM the module requires at leastCreate Menu Items/Modules /Create Menu Items March 24, 2019  ModulesIf you are creating your custom modules, probably you will want to create menu items that will be shown on admin area sidebar or clients area navigation.With Perfex CRM you can easily achieve this with few lines of code.The code samples below, should be places in the module init file.Admin Areahooks()->add_action(&apos;admin_init&apos;, &apos;my_module_init_menu_items&apos;);function my_module_init_menu_items(){    $CI = &get_instance();    $CI->app_menu->add_sidebar_menu_item(&apos;custom-menu-unique-id&apos;, [        &apos;name&apos;     => &apos;Custom Menu Item&apos;, // The name if the item        &apos;href&apos;     => &apos;https://perfexcrm.com/&apos;, // URL of the item        &apos;position&apos; => 10, // The menu position, see below for default positions.        &apos;icon&apos;     => &apos;fa fa-question-circle&apos;, // Font awesome icon    ]);}Item With SubMenu Itemshooks()->add_action(&apos;admin_init&apos;, &apos;my_module_menu_item_collapsible&apos;);function my_module_menu_item_collapsible(){    $CI = &get_instance();    $CI->app_menu->add_sidebar_menu_item(&apos;custom-menu-unique-id&apos;, [        &apos;name&apos;     => &apos;Parent Item&apos;, // The name if the item        &apos;collapse&apos; => true, // Indicates that this item will have submitems        &apos;position&apos; => 10, // The menu position        &apos;icon&apos;     => &apos;fa fa-question-circle&apos;, // Font awesome icon    ]);    // The first paremeter is the parent menu ID/Slug    $CI->app_menu->add_sidebar_children_item(&apos;custom-menu-unique-id&apos;, [        &apos;slug&apos;     => &apos;child-to-custom-menu-item&apos;, // Required ID/slug UNIQUE for the child menu        &apos;name&apos;     => &apos;Sub Menu&apos;, // The name if the item        &apos;href&apos;     => &apos;https://perfexcrm.com/&apos;, // URL of the item        &apos;position&apos; => 5, // The menu position        &apos;icon&apos;     => &apos;fa fa-exclamation&apos;, // Font awesome icon    ]);}Make sure to replace the my_module functions prefix with your own unique function prefix.Default Admin Menu Items PositionsThe default menu items have different positions, so you can hook your new items in the middle, find below the default position, based on where you want to add your custom item, you can adjust the position attribute.Dashboard – 1Customers – 5Sales – 10Subscriptions – 15Expenses – 20Contracts – 25Projects – 30Tasks – 35Tickets – 40Leads – 45Knowledge Base – 50Utilities – 55Reports – 60Clients Areahooks()->add_action(&apos;clients_init&apos;, &apos;my_module_clients_area_menu_items&apos;);function my_module_clients_area_menu_items(){       // Item for all clients    add_theme_menu_item(&apos;unique-item-id&apos;, [            &apos;name&apos;     => &apos;Custom Clients Area&apos;,            &apos;href&apos;     => site_url(&apos;my_module/acme&apos;),            &apos;position&apos; => 10,        ]);    // Show menu item only if client is logged in    if (is_client_logged_in()) {        add_theme_menu_item(&apos;unique-logged-in-item-id&apos;, [                    &apos;name&apos;     => &apos;Only Logged In&apos;,                    &apos;href&apos;     => site_url(&apos;my_module/only_logged_in&apos;),                    &apos;position&apos; => 15,        ]);    }}Default Clients Area Menu Items PositionsKnowledge Base 5Register – 99Login – 100Projects – 10Invoices – 15Contracts – 20Estimates – 25Proposals – 30Subscriptions – 40Support – 45Common Module Functions/Modules /Common Module Functions March 24, 2019  Modulesregister_activation_hook/** * Register module activation hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_activation_hook($module, $function)register_deactivation_hook/** * Register module deactivation hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_deactivation_hook($module, $function)register_uninstall_hook/** * Register module uninstall hook * @param  string $module   module system name * @param  mixed $function  function for the hook * @return mixed */register_uninstall_hook($module, $function)register_cron_task/** * Register module cron task, the cron task is executed after the core cron tasks are finished * @param  mixed $function  function/class parameter for the hook * @return null */register_cron_task($function)register_payment_gateway /**     * Inject custom payment gateway into the payment gateways array     * @param string $idpayment gateway id, should equal like the libraries/classname e.q. gateways/New_gateway     * @param string $module       module name to load the gateway if not already loaded     */register_payment_gateway($id, $module)register_language_files/** * Register module language files to support custom_lang.php file * @param  string $module    module system name * @param  array  $languages array of language file names without the _lang.php * @return null */register_language_files($module, $languages)module_dir_url/** * Module URL * e.q. https://crm-installation.com/module_name/ * @param  string $module  module system name * @param  string $segment additional string to append to the URL * @return string */module_dir_url($module, $segment = &apos;&apos;)module_dir_path /** * Module directory absolute path * @param  string $module module system name * @param  string $concat append additional string to the path * @return string */module_dir_path($module, $concat = &apos;&apos;)module_libs_path/** * Module libraries path * e.q. modules/module_name/libraries * @param  string $module module name * @param  string $concat append additional string to the path * @return string */module_libs_path($module, $concat = &apos;&apos;)Module Security/Modules /Module Security March 24, 2019  ModulesSo, you created your module and works fine, but is it secure? You must ensure that your module is secure and is not vulnerable to any SQL Injections are directory traversing.You can find below best practices to ensure that your module will be secure. Feel free to apply your own best practices for your module security.Gather user data from requestsWhen a user is filling forms, the data is sent e.q. via a POST request to the controller after that you gather this data and insert into the database.To ensure that this data is escaped, you should gather the data with the built-in CodeIgniter framework input class.// Get data from POST request$data = $this->input->post();$client_id = $this->input->post(&apos;client_id&apos;);// Get data from GET request$data = $this->input->get();$client_id = $this->input->get(&apos;client_id&apos;);Do Not Allow Direct Access the Module FilesFor each .php file you created for your module, you must add the code below at the top of the file to prevent the file to be accessed directly.defined(&apos;BASEPATH&apos;) or exit(&apos;No direct script access allowed&apos;);Include empty index.html filesAlways add empty index.html file in each folder you will create in your module directory including your module root directory.E.q. in modules/[your-module]/		E.q. in modules[your-module]/views		Module as Payment Gateway/Modules /Module as Payment Gateway March 24, 2019  ModulesThis feature is available from version 2.3.4Before the start, we assume that you are already familiar with the modules basics, you created a blank module with all the required headers, and the module is activated and shown in the modules list.In modules/[module_name]/ create folder named librariesIn modules/[module_name]/libraries create a class name e.q. Example_gateway.php, the filename must end with _gateway.phpSee below Sample implementationIn your module init file, register the payment gateway with the following code:register_payment_gateway(&apos;example_gateway&apos;, &apos;[module_name]&apos;);Replace [module_name] with your actual module system name and example_gateway with your module class name (in lowercase).If you configured everything as it should, navigate to Setup->Settings->Payment Gateways, you will be able to see your Example gateway listed there with the options you specified.Additionally, depends on the gateway API, you can create a controller to redirect from the process_payment gateway class method.Sample ImplementationBecause Perfex CRM uses Codeigniter framework to integrate the payment gateway you will need to create 1 gateway library (gateway config and process method) and 1 gateway controller (for HTTP requests, show form etc..), you can also take a look at the other gateways files in order to get the idea.In the invoice HTML area when a customer clicks on the button PAY NOW, we call 1 method from the gateway library which will process everything additional that is required for this gateway eq redirect to gateway website and pass parameters or redirect to controller and show form etc…We have simplified a little the process for creating new gateways e.q. the gateway will be auto showed in Setup->Settings->Payment Gateways, encrypting fields, 1 unique function from each gateway library to call etc… but this will still require effort to get started.Before start, make sure that you set development mode in order to see any errors and functions/hooks deprecation warnings.Let’s assume for this example your gateway name is Example<?phpdefined(&apos;BASEPATH&apos;) or exit(&apos;No direct script access allowed&apos;);class Example_gateway extends App_gateway{    public function __construct()    {        /**        * Call App_gateway __construct function        */        parent::__construct();        /**         * Gateway unique id - REQUIRED *          * * The ID must be alphanumeric         * * The filename (Example_gateway.php) and the class name must contain the id as ID_gateway         * * In this case our id is &quot;example&quot;         * * Filename will be Example_gateway.php (first letter is uppercase)         * * Class name will be Example_gateway (first letter is uppercase)         */        $this->setId(&apos;example&apos;);        /**         * REQUIRED         * Gateway name         */        $this->setName(&apos;Example&apos;);        /**         * Add gateway settings         * You can add other settings here          * to fit for your gateway requirements         *         * Currently only 3 field types are accepted for gateway         *         * &apos;type&apos;=>&apos;yes_no&apos;         * &apos;type&apos;=>&apos;input&apos;         * &apos;type&apos;=>&apos;textarea&apos;         *         */        $this->setSettings(array(            array(                &apos;name&apos; => &apos;api_secret_key&apos;,                &apos;encrypted&apos; => true,                &apos;label&apos; => &apos;API KEY&apos;,                &apos;type&apos;=>&apos;input&apos;,            ),            array(                &apos;name&apos; => &apos;api_publishable_key&apos;,                &apos;label&apos; => &apos;SECRET KEY&apos;,                &apos;type&apos;=>&apos;input&apos;            ),            array(                &apos;name&apos; => &apos;currencies&apos;,                &apos;label&apos; => &apos;settings_paymentmethod_currencies&apos;,                &apos;default_value&apos; => &apos;USD,CAD&apos;            ),        ));    }    /**     * Each time a customer click PAY NOW button on the invoice HTML area, the script will process the payment via this function.     * You can show forms here, redirect to gateway website, redirect to Codeigniter controller etc..     * @param  array $data - Contains the total amount to pay and the invoice information     * @return mixed     */    public function process_payment($data)    {        var_dump($data);        die;    }}There are comments on the functions and variables, you should spend some time to read them because they are important if you want to help you get started.Additionally, you can take a look at the other gateway example in application/libraries/gateways or application/controllers/gateways.Excluding URL from CSRFIf the module payment gateway is using webhooks and makes a POST request to a URL in Perfex CRM to notify about the payment updates, you will need to exclude this URL from CSRF in order for the request to pass.You can follow this guide in order to achieve this.Action Hooks/Customization /Action Hooks March 16, 2017  CustomizationPerfex CRM support various action hooks all over the code to give the buyers the best experience.Create file with name my_functions_helper.php in application/helpers/. This file is reserved for all your functions. Here is how the my_functions_helper.php file template looks like /before you change it adding your code:<?php/* From version 1.2.0 my_functions_helper.php removed from the main files and need to be created when needed./* Upload this file to application/helpers IF DONT EXISTS *//* Add your own functions here */Before add any code in my_functions_helper.php, make sure that you set development mode in order to see any errors and functions/hooks deprecation warnings.Version 2.3.0 and above.hooks()->add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1);hooks()->add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1);hooks()->do_action($tag, $arg = &apos;&apos;);hooks()->apply_filters($tag, $value, $additionalParams);The functions below are prior to version 2.3.0Add Action Hookadd_action(&apos;action_function&apos;,&apos;your_function_callback&apos;);Example action hook for after_client_addedNote: this code should be inside my_functions_helper.php mentioned earlier.This is example where the action do not expect to return $data. function callback_after_client_added_insert_to_local_database($id)  {    $clientid = $id;    // Do Staff with $clientid  }  add_action(&apos;after_client_added&apos;,&apos;callback_after_client_added_insert_to_local_database&apos;);Example action hook for before_client_addedThis is example where the action expect to return $data  function callback_before_client_added_check_company($data)  {      if($data[&apos;company&apos;] == &apos;Test&apos;){         $data[&apos;company&apos;] = &apos;&apos;;      }      return $data;  }  add_action(&apos;before_client_added&apos;,&apos;callback_before_client_added_check_company&apos;);